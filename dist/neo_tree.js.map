{
  "version": 3,
  "sources": [
    "c:/Users/neo/AppData/Roaming/npm/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "index.js",
    "lib/default-tree-node-interpreter.js",
    "lib/tree-iterator.js",
    "lib/tree-node.js",
    "lib/tree.js",
    "lib/underscore-like.js",
    "node_modules/neo_iterator/index.js",
    "node_modules/neo_iterator/lib/ArrayIterator.js",
    "node_modules/neo_iterator/lib/Iterator.js",
    "node_modules/neo_iterator/node_modules/neo_lang/index.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/**\r\n * Created by neo on 2015/10/9.\r\n */\r\n'use strict';\r\nvar Tree = require('./lib/tree');\r\nvar TreeIterator = require('./lib/tree-iterator');\r\nvar DefaultTreeNodeInterpreter = require('./lib/default-tree-node-interpreter');\r\nvar TreeNode = require('./lib/tree-node');\r\nmodule.exports.Tree = Tree;\r\nmodule.exports.TreeIterator = TreeIterator;\r\nmodule.exports.DefaultTreeNodeInterpreter = DefaultTreeNodeInterpreter;\r\nmodule.exports.TreeNode = TreeNode;\r\n\r\n\r\n",
    "/**\r\n * Created by neo on 2015/10/9.\r\n */\r\nvar neo = require('neo_lang');\r\nvar _ = require('./underscore-like');\r\n\r\nvar DefaultTreeNodeInterpreter = neo.extend(Object, {\r\n    constructor: function () {\r\n        this.rootIdValues = [-1];\r\n        this.idField = 'id';\r\n        this.parentIdField = 'parent_id';\r\n        this.nameField = 'name';\r\n        DefaultTreeNodeInterpreter.superclass.constructor.call(this);\r\n        return this;\r\n    },\r\n    isRoot: function (node) {\r\n        return _.contains(this.rootIdValues, node.data[this.idField]);\r\n    },\r\n    isChild: function (parent, child) {\r\n        return parent.data[this.idField] == child.data[this.parentIdField];\r\n    },\r\n    isParent: function (child, parent) {\r\n        return isChild(parent, child);\r\n    },\r\n    id: function (node) {\r\n        return node.data[this.idField];\r\n    },\r\n    parent_id: function () {\r\n        return node.data[this.parentIdField];\r\n    },\r\n    name: function (node) {\r\n        return node.data[this.nameField];\r\n    }\r\n});\r\n\r\nmodule.exports=DefaultTreeNodeInterpreter;",
    "/**\n * Created by neo on 2015/10/9.\n */\n'use strict';\nvar neo = require('neo_lang');\nvar Iterator = require('neo_iterator').Iterator;\n\n/*\n 节点以树的方式遍历\n */\nfunction TreeIterator(tree) {\n    Iterator.apply(this, arguments);\n    return this;\n}\nneo.extend(TreeIterator, Iterator,\n    {\n        getDeep: function () {\n            if (this.current == null) {\n                return -1;\n            }\n            return this.current.parents().length;\n        },\n        next: function () {\n            if (this.eof)\n                return null;\n            var nextNode = this.__findNext(this.current);\n            if (nextNode == null) {\n                this.eof = true;\n            }else{\n                this.eof=this.__findNext(nextNode)==null;\n            }\n            this.current=nextNode;\n            return this.current;\n        },\n        inquiryEnd: function (element) {\n            return this.__findNext(element) == null;\n        },\n        __findNext: function (element) {\n            var tree = this.data;\n            if (element == null) {\n                return tree;\n            } else {\n                if (element.children.length > 0) {\n                    return element.children[0];\n                } else if (element.next().length > 0) {\n                    return element.next()[0];\n                } else {\n                    return this.__findParent(element);\n                }\n            }\n        },\n        __findParent: function (child) {\n            if (child.parent == null) {\n                return null;\n            } else if (child.parent.next().length > 0) {\n                return child.parent.next()[0];\n            } else return this.__findParent(child.parent);\n        }\n    }\n);\nmodule.exports = TreeIterator;",
    "/**\r\n * Created by neo on 2015/10/10.\r\n */\r\nvar neo = require('neo_lang');\r\nvar _ = require('./underscore-like');\r\n\r\nvar TreeNode = neo.extend(Object, {\r\n    constructor: function (tree, data) {\r\n        this.data = data || {};\r\n        this.tree = tree;\r\n        this.parent = null;\r\n        this.children = [];\r\n        return this;\r\n    },\r\n    next: function () {\r\n        var result = [];\r\n        if (this.parent != null) {\r\n            var i = this.parent.children.indexOf(this);\r\n            result = this.parent.children.slice(i + 1);\r\n        }\r\n        return result;\r\n    },\r\n    parents: function () {\r\n        var result = [];\r\n        var p = this.parent;\r\n        while (p != null) {\r\n            result.unshift(p);\r\n            p = p.parent;\r\n        }\r\n        return result;\r\n    },\r\n    isParent: function (node) {\r\n        return this.tree.nodeInterpreter.isChild(this, node);\r\n    },\r\n    findParent: function (node) {\r\n        if (this.isParent(node)) {\r\n            return this;\r\n        }\r\n        for (var i = 0, len = this.children.length; i < len; i++) {\r\n            var rslt = this.children[i].findParent(node);\r\n            if (rslt != null)return rslt;\r\n        }\r\n        return null;\r\n    },\r\n    addChild: function (node) {\r\n        this.children.push(node);\r\n        node.parent = this;\r\n        return this;\r\n    },\r\n    removeAllChildren: function () {\r\n        _.each(this.children, function (node) {\r\n            node.removeAllChildren();\r\n        });\r\n        this.children.splice(0);\r\n    },\r\n    id: function () {\r\n        return this.tree.nodeInterpreter.id(this);\r\n    },\r\n    parent_id: function () {\r\n        return this.tree.nodeInterpreter.parent_id(this);\r\n    },\r\n    name: function () {\r\n        return this.tree.nodeInterpreter.name(this);\r\n    },\r\n    getChildrenDatas: function () {\r\n        return _.map(this.children, function (node) {\r\n            return node.data\r\n        });\r\n    },\r\n    hasChildren: function () {\r\n        return this.children.length > 0;\r\n    }\r\n});\r\n\r\nmodule.exports = TreeNode;",
    "/**\n * Created by neo on 2015/10/9.\n */\n'use strict';\nvar neo = require('neo_lang');\nvar TreeNode = require('./tree-node');\nvar DefaultTreeNodeInterpreter = require('./default-tree-node-interpreter');\nvar _ = require('./underscore-like');\n\nvar Tree = TreeNode.extend({\n    constructor: function (rootData, nodeInterpreter) {\n        this.nodeInterpreter = nodeInterpreter || new DefaultTreeNodeInterpreter();\n        Tree.superclass.constructor.call(this, this, rootData);\n        this.nodes = [this];\n        this._cacheP = null;//在新建树的时候，保存上次找到的父节点，可加快查找。大约可提高2倍。\n        this.detaches = [];\n        return this;\n    },\n    /*\n     * 可乱序方式添加,不过按顺序加载(先父后子）最快，比乱序可能快一倍。\n     * */\n    add: function add(data) {\n        var treeNode = new TreeNode(this, data);\n        this.nodes.push(treeNode);\n        var parent = null;\n        if (this._cacheP !== null && this._cacheP.isParent(treeNode)) {\n            //上次的父节点作为预测点\n            this._cacheP.addChild(treeNode);\n        } else if ((parent = this.findParent(treeNode)) != null) {\n            //在主树中找到\n            parent.addChild(treeNode);\n            this._cacheP = parent;\n        } else {\n            for (var i = 0, len = this.detaches.length; i < len; i++) {\n                if ((parent = this.detaches[i].findParent(treeNode)) != null) {\n                    //在孤岛的树中找到\n                    parent.addChild(treeNode);\n                    this._cacheP = parent;\n                    break;\n                }\n            }\n        }\n        //把孤岛的树尝试合并到本节点下\n        this.detaches = _.reject(this.detaches, function (node) {\n            if (treeNode.isParent(node)) {\n                treeNode.addChild(node);\n                return true;\n            }\n            return false;\n        });\n        if (treeNode.parent == null) {\n            this.detaches.push(treeNode);\n        }\n        return this;\n    },\n    removeAll: function () {\n        this.nodes.splice(1, this.nodes.length);\n        this.removeAllChildren();\n    },\n    findNodeByData: function (data) {\n        for (var i = 0, len = this.nodes.length; i < len; i++) {\n            if (this.nodes[i].data == data) {\n                return this.nodes[i];\n            }\n        }\n        return null;\n    },\n    findNodeByName: function (name) {\n        for (var i = 0, len = this.nodes.length; i < len; i++) {\n            if (this.nodes[i].name() == name) {\n                return this.nodes[i];\n            }\n        }\n        return null;\n    }\n});\nmodule.exports = Tree;",
    "/**\r\n * Created by neo on 2015/10/17.\r\n */\r\nvar _ = module.exports;\r\n_.contains = function (arr, val) {\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n        if (arr[i] == val) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n_.each = function (arr, fun) {\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n        fun.call(arr[i], arr[i]);\r\n    }\r\n};\r\n_.map = function (arr, fun) {\r\n    var result = [];\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n        result.push(fun.call(arr[i], arr[i]));\r\n    }\r\n    return result;\r\n};\r\n\r\n_.reject = function (arr, fun) {\r\n    var result = [];\r\n    for (var i = 0, len = arr.length; i < len; i++) {\r\n        if (!fun.call(arr[i], arr[i])) {\r\n            result.push(arr[i]);\r\n        }\r\n    }\r\n    return result;\r\n};",
    "'use strict';\r\nvar Iterator=require('./lib/Iterator');\r\nvar ArrayIterator=require('./lib/ArrayIterator');\r\nmodule.exports={\r\n    Iterator:Iterator,\r\n    ArrayIterator:ArrayIterator\r\n};",
    "/**\r\n * Created by neo on 2015/10/7.\r\n */\r\n'use strict';\r\nvar Iterator = require('./Iterator');\r\nvar neo = require('neo_lang');\r\n/*\r\n Array 的iterator\r\n */\r\nfunction ArrayIterator(data) {\r\n    Iterator.apply(this, arguments);\r\n    this._idx = -1;\r\n    return this;\r\n}\r\nneo.extend(ArrayIterator, Iterator, {\r\n    next: function () {\r\n        if (this.eof)\r\n            return null;\r\n        this._idx = this._idx == -1 ? 0 : this._idx + 1;\r\n        this.eof = this._idx >= this.data.length-1;\r\n        this.current = this.data[this._idx];\r\n        return this.current;\r\n    },\r\n    inquiryEnd: function (element) {\r\n        if (this.data == undefined) {\r\n            return true;\r\n        }\r\n        if (this.data.length == 0) {\r\n            return true;\r\n        }\r\n        if (typeof element == 'undefined') {\r\n            this._idx = -1;\r\n            return false;\r\n        }\r\n        if (element == null) {\r\n            this._idx = -1;\r\n            return false;\r\n        }\r\n        this._idx = this.data.indexOf(element);\r\n        return this._idx + 1 >= this.data.length;\r\n    }\r\n});\r\n\r\nmodule.exports = ArrayIterator;",
    "/**\r\n * Created by neo on 2015/10/7.\r\n */\r\n/**\r\n * Created by neo on 2015/10/7.\r\n */\r\n'use strict';\r\nfunction Iterator(data) {\r\n    this.data = data;\r\n    this.current = null;\r\n    this.eof = false;\r\n    this.reset();\r\n    return this;\r\n}\r\nvar proto = Iterator.prototype;\r\nproto.reset = function () {\r\n    this.setCurrent(null);\r\n    return this;\r\n};\r\nproto.getCurrent = function () {\r\n    return this.current;\r\n};\r\nproto.setCurrent = function (current) {\r\n    this.current = current;\r\n    this.eof = this.inquiryEnd(this.current);\r\n};\r\nproto.hasNext = function () {\r\n    return !this.eof;\r\n};\r\nproto.inquiryEnd = function (element) {\r\n    return true;\r\n};\r\nproto.next = function () {\r\n    this.eof = true;\r\n    return null;\r\n};\r\nmodule.exports = Iterator;",
    "/**\r\n * Created by neo on 2015/10/7.\r\n */\r\n'use strict';\r\nvar extend = (function () {\r\n    // inline overrides\r\n    var ua = typeof navigator == \"object\" && (typeof navigator.userAgent == 'string' )\r\n            ? navigator.userAgent.toLowerCase() : \"\",\r\n        check = function (r) {\r\n            return r.test(ua);\r\n        },\r\n        isOpera = check(/opera/),\r\n        isIE = !isOpera && check(/msie/),\r\n        apply = function (o, c, defaults) {\r\n            // no \"this\" reference for friendly out of scope calls\r\n            if (defaults) {\r\n                apply(o, defaults);\r\n            }\r\n            if (o && c && typeof c == 'object') {\r\n                for (var p in c) {\r\n                    o[p] = c[p];\r\n                }\r\n            }\r\n            return o;\r\n        },\r\n        io = function (o) {\r\n            for (var m in o) {\r\n                this[m] = o[m];\r\n            }\r\n        },\r\n        override = function (origclass, overrides) {\r\n            if (overrides) {\r\n                var p = origclass.prototype;\r\n                apply(p, overrides);\r\n                if (isIE && overrides.hasOwnProperty('toString')) {\r\n                    p.toString = overrides.toString;\r\n                }\r\n            }\r\n        },\r\n        oc = Object.prototype.constructor;\r\n\r\n    return function (sb, sp, overrides) {\r\n        if (typeof sp == 'object') {\r\n            overrides = sp;\r\n            sp = sb;\r\n            sb = overrides.constructor != oc ? overrides.constructor : function () {\r\n                sp.apply(this, arguments);\r\n            };\r\n        }\r\n        var F = function () {\r\n            },\r\n            sbp,\r\n            spp = sp.prototype;\r\n\r\n        F.prototype = spp;\r\n        sbp = sb.prototype = new F();\r\n        sbp.constructor = sb;\r\n        sb.superclass = spp;\r\n        if (spp.constructor == oc) {\r\n            spp.constructor = sp;\r\n        }\r\n        sb.override = function (o) {\r\n            override(sb, o);\r\n        };\r\n        sbp.superclass = sbp.supr = (function () {\r\n            return spp;\r\n        });\r\n        sbp.override = io;\r\n        override(sb, overrides);\r\n        sb.extend = function (o) {\r\n            return extend(sb, o);\r\n        };\r\n        return sb;\r\n    };\r\n})();\r\n\r\nmodule.exports.extend=extend;"
  ]
}